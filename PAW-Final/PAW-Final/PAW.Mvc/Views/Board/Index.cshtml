@model List<PAW.Models.ViewModels.TableroViewModel>
@{
    ViewData["Title"] = "Mis Tableros";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0">@ViewData["Title"]</h2>
    <div class="d-flex gap-2">
        <a asp-controller="Tablero" asp-action="Create" class="btn btn-primary btn-sm">Nuevo tablero</a>
        <a asp-action="Index" class="btn btn-outline-secondary btn-sm">Refrescar</a>
    </div>
</div>

@if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
{
    <div class="alert alert-danger">@err</div>
}

<form asp-antiforgery="true" id="__af" style="display:none"></form>

@if (!(Model?.Any() ?? false))
{
    <div class="border rounded-3 bg-light p-5 text-center">
        <h5 class="mb-2">Aún no tienes tableros</h5>
        <p class="text-muted mb-3">Crea tu primer tablero para empezar a agregar listas y tarjetas.</p>
        <a asp-controller="Tablero" asp-action="Create" class="btn btn-primary">Crear mi primer tablero</a>
    </div>
}
else
{
    <div class="board-container">
        @foreach (var tablero in Model)
        {
            <div class="board">
                <div class="board-header d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="mb-0">@tablero.Titulo</h3>
                        <small class="text-muted">@tablero.FechaCreacion?.ToString("dd/MM/yyyy")</small>
                    </div>

                    <!-- Menú por tablero -->
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="menuTablero-@tablero.Id" data-bs-toggle="dropdown" aria-expanded="false">
                            ⚙️
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="menuTablero-@tablero.Id">
                            <li>
                                <a class="dropdown-item" asp-controller="Tablero" asp-action="Edit" asp-route-id="@tablero.Id">Editar</a>
                            </li>
                            <li>
                                <a class="dropdown-item text-danger" data-bs-toggle="modal" href="#deleteTableroModal-@tablero.Id">Eliminar</a>
                            </li>
                        </ul>
                    </div>
                </div>

                <!-- Agregar lista -->
                <div class="mb-3 text-center">
                    <details>
                        <summary class="text-muted">➕ Agregar lista</summary>
                        <form asp-controller="Board" asp-action="CreateList" method="post" class="row g-2 justify-content-center mt-2">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="tableroId" value="@tablero.Id" />
                            <div class="col-12 col-md-6">
                                <input class="form-control" name="titulo" placeholder="Nombre de la lista" required />
                            </div>
                            <div class="col-auto">
                                <button class="btn btn-primary btn-sm" type="submit">Crear lista</button>
                            </div>
                        </form>
                    </details>
                </div>

                <div class="lists-container">
                    @if (tablero.Lista?.Any() ?? false)
                    {
                        @foreach (var lista in tablero.Lista.OrderBy(l => l.Orden))
                        {
                            <div class="list-column">
                                <div class="list-header d-flex justify-content-between align-items-center">
                                    <strong>@lista.Titulo</strong>
                                    <form asp-controller="Board" asp-action="DeleteList" method="post" onsubmit="return confirm('¿Eliminar esta lista y sus tarjetas?');">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@lista.Id" />
                                        <button class="btn btn-danger btn-sm" type="submit">Eliminar</button>
                                    </form>
                                </div>

                                <div class="cards-container">
                                    @if (lista.ListaTarjetas?.Any() ?? false)
                                    {
                                        @foreach (var tarjeta in lista.ListaTarjetas)
                                        {
                                            <div class="card-item" id="card-@tarjeta.Id">
                                                <div class="d-flex justify-content-between align-items-start gap-2">
                                                    <div>
                                                        <strong>@tarjeta.Titulo</strong>
                                                        @if (!string.IsNullOrEmpty(tarjeta.Descripcion))
                                                        {
                                                            <p class="small mb-1 text-muted">@tarjeta.Descripcion</p>
                                                        }
                                                        @if (tarjeta.FechaVencimiento.HasValue)
                                                        {
                                                            <div class="small text-muted">Vence: @tarjeta.FechaVencimiento.Value.ToString("dd/MM/yyyy")</div>
                                                        }
                                                    </div>
                                                    <form asp-controller="Board" asp-action="DeleteCard" method="post" onsubmit="return confirm('¿Eliminar esta tarjeta?');">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="id" value="@tarjeta.Id" />
                                                        <button class="btn btn-outline-danger btn-sm" type="submit">Eliminar</button>
                                                    </form>
                                                </div>

                                                <details class="mt-2" data-tarjeta="@tarjeta.Id" onclick="if(this.open){loadComments(@tarjeta.Id);}">
                                                    <summary class="small text-muted">💬 Comentarios</summary>
                                                    <div class="comments-box" id="comments-list-@tarjeta.Id">
                                                        <div class="small text-muted">Cargando comentarios…</div>
                                                    </div>

                                                    <form class="row g-2 align-items-center mt-1" onsubmit="return addComment(event, @tarjeta.Id);">
                                                        <div class="col-12">
                                                            <input class="form-control form-control-sm" type="text" name="contenido" placeholder="Escribe un comentario…" required />
                                                        </div>
                                                        <div class="col-auto">
                                                            <button class="btn btn-secondary btn-sm" type="submit">Agregar</button>
                                                        </div>
                                                    </form>
                                                </details>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-muted small mb-2">No hay tarjetas</p>
                                    }
                                </div>

                                <details class="mt-2">
                                    <summary class="text-muted small">➕ Agregar tarjeta</summary>
                                    <form asp-controller="Board" asp-action="CreateCard" method="post" class="mt-2">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="listaId" value="@lista.Id" />
                                        <div class="mb-2">
                                            <input class="form-control form-control-sm" type="text" name="titulo" placeholder="Título" required />
                                        </div>
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" name="descripcion" rows="2" placeholder="Descripción (opcional)"></textarea>
                                        </div>
                                        <div class="d-flex gap-2 align-items-center">
                                            <input class="form-control form-control-sm" type="date" name="fechaVencimiento" />
                                            <button class="btn btn-primary btn-sm" type="submit">Crear tarjeta</button>
                                        </div>
                                    </form>
                                </details>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted small">No hay listas</p>
                    }
                </div>

                <div class="board-footer">
                    <a asp-controller="Board" asp-action="Details" asp-route-id="@tablero.Id" class="btn btn-outline-primary btn-sm">Abrir tablero</a>
                </div>
            </div>

            <!-- Renderizamos la partial view del modal -->
            @await Html.PartialAsync("_DeleteTableroPartial", tablero)
        }
    </div>
}

@section Scripts {
    <script>
        function getAntiForgery() {
            const tokenInput = document.querySelector('#__af input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        async function loadComments(tarjetaId) {
            const cont = document.getElementById('comments-list-' + tarjetaId);
            if (!cont) return;
            cont.innerHTML = '<div class="small text-muted">Cargando comentarios…</div>';
            try {
                const res = await fetch(`@Url.Action("GetComments", "Board")?tarjetaId=${tarjetaId}`, { credentials: 'same-origin' });
                const data = await res.json();
                if (!Array.isArray(data)) throw new Error('Respuesta inválida');
                if (data.length === 0) { cont.innerHTML = '<div class="small text-muted">Sin comentarios todavía.</div>'; return; }
                cont.innerHTML = '';
                for (const c of data) {
                    const row = document.createElement('div');
                    row.className = 'comment-item d-flex justify-content-between align-items-center gap-2';
                    const text = document.createElement('div');
                    const fecha = c.fechaCreacion ? new Date(c.fechaCreacion).toLocaleString() : '';
                    text.innerHTML = `<div>${escapeHtml(c.contenido || '')}</div><div class="small text-muted">${fecha}</div>`;
                    const form = document.createElement('form');
                    form.method = 'post';
                    form.onsubmit = (e) => deleteComment(e, c.id);
                    form.innerHTML = `<input type="hidden" name="id" value="${c.id}"><input type="hidden" name="__RequestVerificationToken" value="${getAntiForgery()}"><button class="btn btn-outline-danger btn-sm" type="submit">Eliminar</button>`;
                    row.appendChild(text); row.appendChild(form); cont.appendChild(row);
                }
            } catch { cont.innerHTML = '<div class="text-danger small">Error al cargar comentarios.</div>'; }
        }

        async function addComment(ev, tarjetaId) {
            ev.preventDefault();
            const form = ev.target;
            const contenido = form.contenido.value.trim();
            if (!contenido) return false;
            const fd = new FormData();
            fd.append('tarjetaId', tarjetaId);
            fd.append('contenido', contenido);
            fd.append('__RequestVerificationToken', getAntiForgery());
            const res = await fetch(`@Url.Action("CreateComment", "Board")`, { method:'POST', credentials:'same-origin', body: fd });
            if (res.ok) { form.reset(); loadComments(tarjetaId); } else { alert('No se pudo agregar el comentario.'); }
            return false;
        }

        async function deleteComment(ev) {
            ev.preventDefault();
            if(!confirm('¿Eliminar este comentario?')) return false;
            const fd = new FormData(ev.target);
            fd.append('__RequestVerificationToken', getAntiForgery());
            const res = await fetch(`@Url.Action("DeleteComment", "Board")`, { method:'POST', credentials:'same-origin', body: fd });
            if(res.ok){ const details = ev.target.closest('details'); const tarjetaId = details?.getAttribute('data-tarjeta'); if(tarjetaId) loadComments(tarjetaId); } else { alert('No se pudo eliminar el comentario.'); }
            return false;
        }

        function escapeHtml(s) {
            const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"':'&quot;', "'": '&#039;' };
            return String(s).replace(/[&<>"']/g, m => map[m]);
        }
    </script>
}

<style>
    .board-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .board {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,.1);
    }

    .board-header {
        margin-bottom: 1rem;
    }

    .lists-container {
        display: flex;
        gap: 1rem;
        overflow-x: auto;
        padding-bottom: .5rem;
    }

    .list-column {
        background: #e2e6ea;
        border-radius: 8px;
        min-width: 250px;
        max-width: 320px;
        padding: .5rem;
        display: flex;
        flex-direction: column;
        gap: .5rem;
        flex-shrink: 0;
    }

    .list-header {
        font-weight: 700;
        margin-bottom: .5rem;
        text-align: center;
    }

    .cards-container {
        display: flex;
        flex-direction: column;
        gap: .5rem;
    }

    .card-item {
        background: #fff;
        border-radius: 6px;
        padding: .5rem;
        box-shadow: 0 2px 6px rgba(0,0,0,.1);
        transition: transform .15s, box-shadow .15s;
    }

        .card-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,.15);
        }

    .board-footer {
        text-align: center;
        margin-top: 1rem;
    }

    .lists-container::-webkit-scrollbar {
        height: 8px;
    }

    .lists-container::-webkit-scrollbar-thumb {
        background: rgba(0,0,0,.2);
        border-radius: 4px;
    }

    .comments-box {
        background: #f3f4f6;
        border-radius: 8px;
        padding: .5rem;
        margin-top: .25rem;
    }

    .comment-item {
        background: #fff;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        padding: .4rem .6rem;
        margin: .35rem 0;
    }
</style>
