@model PAW.Models.ViewModels.TableroViewModel
@{
    ViewData["Title"] = "Tablero";
}
<h2 class="mb-3">@Model.Titulo <small class="text-muted">(@Model.FechaCreacion?.ToString("dd/MM/yyyy"))</small></h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<!-- Antiforgery para fetch (editar/eliminar tarjeta) -->
<form asp-antiforgery="true" id="__af"></form>

<!-- Agregar lista -->
<div class="mb-3">
    <details>
        <summary class="text-muted">➕ Agregar lista</summary>
        <form asp-controller="Board" asp-action="CreateList" method="post" class="row g-2 mt-2">
            @Html.AntiForgeryToken()
            <input type="hidden" name="tableroId" value="@Model.Id" />
            <div class="col-12 col-md-6">
                <input class="form-control" name="titulo" placeholder="Nombre de la lista" required />
            </div>
            <div class="col-auto">
                <button class="btn btn-primary btn-sm">Crear lista</button>
            </div>
        </form>
    </details>
</div>

<div class="lists-container d-flex gap-3 overflow-auto pb-2">
    @foreach (var lista in (Model.Lista ?? new List<PAW.Models.ViewModels.ListumViewModel>()).OrderBy(l => l.Orden))
    {
        <div class="list-column bg-light rounded p-2" style="min-width:300px;max-width:340px;">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>@lista.Titulo</strong>
                <form asp-controller="Board" asp-action="DeleteList" method="post" onsubmit="return confirm('¿Eliminar esta lista y sus tarjetas?');">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@lista.Id" />
                    <button class="btn btn-danger btn-sm" type="submit">Eliminar</button>
                </form>
            </div>

            <div class="d-grid gap-2">
                @if (lista.ListaTarjetas?.Any() ?? false)
                {
                    foreach (var tarjeta in lista.ListaTarjetas)
                    {
                        @Html.Partial("_CardItem", tarjeta)
                    }
                }
                else
                {
                    <p class="text-muted small m-0">No hay tarjetas</p>
                }
            </div>

            <!-- Agregar tarjeta -->
            <details class="mt-2">
                <summary class="text-muted small">➕ Agregar tarjeta</summary>
                <form asp-controller="Board" asp-action="CreateCard" method="post" class="mt-2">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="listaId" value="@lista.Id" />
                    <div class="mb-2">
                        <input class="form-control form-control-sm" type="text" name="titulo" placeholder="Título" required />
                    </div>
                    <div class="mb-2">
                        <textarea class="form-control form-control-sm" name="descripcion" rows="2" placeholder="Descripción (opcional)"></textarea>
                    </div>
                    <div class="d-flex gap-2 align-items-center">
                        <input class="form-control form-control-sm" type="date" name="fechaVencimiento" />
                        <button class="btn btn-primary btn-sm" type="submit">Crear tarjeta</button>
                    </div>
                </form>
            </details>
        </div>
    }
</div>

@section Scripts {
    <script>
        function getAF() {
          const t = document.querySelector('#__af input[name="__RequestVerificationToken"]');
          return t ? t.value : '';
        }

        // Abrir modal de edición
        document.addEventListener('click', (e) => {
          const btn = e.target.closest('.btn-edit-card');
          if (!btn) return;
          e.preventDefault();
          const id = btn.getAttribute('data-card-id');
          const modalEl = document.getElementById('editCardModal-' + id);
          if (!modalEl) return;
          if (window.bootstrap?.Modal) {
            new bootstrap.Modal(modalEl).show();
          } else {
            modalEl.style.display = 'block';
          }
        });

        // Guardar edición
        document.addEventListener('submit', async (e) => {
          const form = e.target.closest('form[data-edit-card-form]');
          if (!form) return;
          e.preventDefault();

          const id = form.getAttribute('data-edit-card-form');
          const fd = new FormData(form);
          fd.append('__RequestVerificationToken', getAF());

          const res = await fetch('@Url.Action("EditCard", "Board")', {
            method: 'POST', credentials: 'same-origin', body: fd
          });

          if (res.ok) {
            // Actualiza UI del card
            const card = document.querySelector(`.card-item[data-card-id="${id}"]`);
            if (card) {
              const title = fd.get('titulo') ?? '';
              const desc  = (fd.get('descripcion') ?? '').toString().trim();
              const due   = (fd.get('fechaVencimiento') ?? '').toString();

              const titleEl = card.querySelector('.fw-semibold');
              if (titleEl) titleEl.textContent = title;

              let descEl = card.querySelector('.text-muted.small.mt-1');
              if (desc) {
                if (!descEl) {
                  descEl = document.createElement('div');
                  descEl.className = 'text-muted small mt-1';
                  card.querySelector('.d-flex > div')?.appendChild(descEl);
                }
                descEl.textContent = desc;
              } else if (descEl) {
                descEl.remove();
              }

              let dateEl = Array.from(card.querySelectorAll('.text-muted.small'))
                           .find(x => x.textContent?.startsWith('Vence:'));
              if (due) {
                const [y,m,d] = due.split('-');
                const pretty = `${d}/${m}/${y}`;
                if (!dateEl) {
                  dateEl = document.createElement('div');
                  dateEl.className = 'text-muted small';
                  card.querySelector('.d-flex > div')?.appendChild(dateEl);
                }
                dateEl.textContent = `Vence: ${pretty}`;
              } else if (dateEl) {
                dateEl.remove();
              }
            }

            const modalEl = document.getElementById('editCardModal-' + id);
            window.bootstrap?.Modal.getInstance(modalEl)?.hide();
          } else {
            alert('No se pudo guardar la tarjeta.');
          }
        });

        // Eliminar tarjeta (vía menú)
        document.addEventListener('click', async (e) => {
          const btn = e.target.closest('.btn-delete-card');
          if (!btn) return;
          e.preventDefault();

          if (!confirm('¿Eliminar esta tarjeta?')) return;

          const id = btn.getAttribute('data-card-id');
          const fd = new FormData();
          fd.append('id', id ?? '');
          fd.append('__RequestVerificationToken', getAF());

          const res = await fetch('@Url.Action("DeleteCard", "Board")', {
            method: 'POST', credentials: 'same-origin', body: fd
          });

          if (res.ok) {
            document.querySelector(`.card-item[data-card-id="${id}"]`)?.remove();
          } else {
            alert('No se pudo eliminar la tarjeta.');
          }
        });
    </script>
}

